package com.scoproject.carmudi.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARS_DATA".
*/
public class CarsDataDao extends AbstractDao<CarsData, String> {

    public static final String TABLENAME = "CARS_DATA";

    /**
     * Properties of entity CarsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FkCountry = new Property(0, String.class, "fkCountry", false, "FK_COUNTRY");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property AttributeSetName = new Property(2, String.class, "attributeSetName", false, "ATTRIBUTE_SET_NAME");
        public final static Property AttributeSetNameLocal = new Property(3, String.class, "attributeSetNameLocal", false, "ATTRIBUTE_SET_NAME_LOCAL");
        public final static Property Approved = new Property(4, String.class, "approved", false, "APPROVED");
        public final static Property StatusSupplierConfig = new Property(5, String.class, "statusSupplierConfig", false, "STATUS_SUPPLIER_CONFIG");
        public final static Property ActivatedAt = new Property(6, String.class, "activatedAt", false, "ACTIVATED_AT");
        public final static Property ListingStart = new Property(7, String.class, "listingStart", false, "LISTING_START");
        public final static Property ListingEnd = new Property(8, String.class, "listingEnd", false, "LISTING_END");
        public final static Property FkVertical = new Property(9, String.class, "fkVertical", false, "FK_VERTICAL");
        public final static Property FkCatalogBrand = new Property(10, String.class, "fkCatalogBrand", false, "FK_CATALOG_BRAND");
        public final static Property FkCatalogBrandModel = new Property(11, String.class, "fkCatalogBrandModel", false, "FK_CATALOG_BRAND_MODEL");
        public final static Property BrandModelEdition = new Property(12, String.class, "brandModelEdition", false, "BRAND_MODEL_EDITION");
        public final static Property ListingType = new Property(13, String.class, "listingType", false, "LISTING_TYPE");
        public final static Property ListingCountry = new Property(14, String.class, "listingCountry", false, "LISTING_COUNTRY");
        public final static Property ListingArea = new Property(15, String.class, "listingArea", false, "LISTING_AREA");
        public final static Property Condition = new Property(16, String.class, "condition", false, "CONDITION");
        public final static Property ConditionPosition = new Property(17, String.class, "conditionPosition", false, "CONDITION_POSITION");
        public final static Property ConditionId = new Property(18, String.class, "conditionId", false, "CONDITION_ID");
        public final static Property ColorFamilyPosition = new Property(19, String.class, "colorFamilyPosition", false, "COLOR_FAMILY_POSITION");
        public final static Property ColorFamilyId = new Property(20, String.class, "colorFamilyId", false, "COLOR_FAMILY_ID");
        public final static Property DoorsPosition = new Property(21, String.class, "doorsPosition", false, "DOORS_POSITION");
        public final static Property DoorsId = new Property(22, String.class, "doorsId", false, "DOORS_ID");
        public final static Property Power = new Property(23, String.class, "power", false, "POWER");
        public final static Property DriveTypePosition = new Property(24, String.class, "driveTypePosition", false, "DRIVE_TYPE_POSITION");
        public final static Property DriveTypeId = new Property(25, String.class, "driveTypeId", false, "DRIVE_TYPE_ID");
        public final static Property Interior = new Property(26, String.class, "interior", false, "INTERIOR");
        public final static Property Exterior = new Property(27, String.class, "exterior", false, "EXTERIOR");
        public final static Property Equipment = new Property(28, String.class, "equipment", false, "EQUIPMENT");
        public final static Property WarrantyTypePosition = new Property(29, String.class, "warrantyTypePosition", false, "WARRANTY_TYPE_POSITION");
        public final static Property WarrantyTypeId = new Property(30, String.class, "warrantyTypeId", false, "WARRANTY_TYPE_ID");
        public final static Property WarrantyYearsPosition = new Property(31, String.class, "warrantyYearsPosition", false, "WARRANTY_YEARS_POSITION");
        public final static Property WarrantyYearsId = new Property(32, String.class, "warrantyYearsId", false, "WARRANTY_YEARS_ID");
        public final static Property PriceConditionsPosition = new Property(33, String.class, "priceConditionsPosition", false, "PRICE_CONDITIONS_POSITION");
        public final static Property PriceConditionsId = new Property(34, String.class, "priceConditionsId", false, "PRICE_CONDITIONS_ID");
        public final static Property PremiumListing = new Property(35, String.class, "premiumListing", false, "PREMIUM_LISTING");
        public final static Property AlternateSku = new Property(36, String.class, "alternateSku", false, "ALTERNATE_SKU");
        public final static Property OriginalName = new Property(37, String.class, "originalName", false, "ORIGINAL_NAME");
        public final static Property RootCategory = new Property(38, String.class, "rootCategory", false, "ROOT_CATEGORY");
        public final static Property AgencyLogo = new Property(39, String.class, "agencyLogo", false, "AGENCY_LOGO");
        public final static Property NewProduct = new Property(40, Boolean.class, "newProduct", false, "NEW_PRODUCT");
        public final static Property Url = new Property(41, String.class, "url", false, "URL");
        public final static Property Id = new Property(42, String.class, "id", true, "ID");
        public final static Property LocationLatitude = new Property(43, String.class, "locationLatitude", false, "LOCATION_LATITUDE");
        public final static Property LocationLongitude = new Property(44, String.class, "locationLongitude", false, "LOCATION_LONGITUDE");
        public final static Property GoogleFormattedAddress = new Property(45, String.class, "googleFormattedAddress", false, "GOOGLE_FORMATTED_ADDRESS");
        public final static Property GooglePlaceId = new Property(46, String.class, "googlePlaceId", false, "GOOGLE_PLACE_ID");
        public final static Property FkCustomerAddress = new Property(47, String.class, "fkCustomerAddress", false, "FK_CUSTOMER_ADDRESS");
        public final static Property ListingRegion = new Property(48, String.class, "listingRegion", false, "LISTING_REGION");
        public final static Property ListingCity = new Property(49, String.class, "listingCity", false, "LISTING_CITY");
        public final static Property AgencyAddress = new Property(50, String.class, "agencyAddress", false, "AGENCY_ADDRESS");
        public final static Property AgencyCity = new Property(51, String.class, "agencyCity", false, "AGENCY_CITY");
        public final static Property FkCountryRegion = new Property(52, String.class, "fkCountryRegion", false, "FK_COUNTRY_REGION");
        public final static Property FkCountryRegionCity = new Property(53, String.class, "fkCountryRegionCity", false, "FK_COUNTRY_REGION_CITY");
        public final static Property FkCountryRegionCityArea = new Property(54, String.class, "fkCountryRegionCityArea", false, "FK_COUNTRY_REGION_CITY_AREA");
        public final static Property ShowListingAddress = new Property(55, String.class, "showListingAddress", false, "SHOW_LISTING_ADDRESS");
        public final static Property ItemContactName = new Property(56, String.class, "itemContactName", false, "ITEM_CONTACT_NAME");
        public final static Property ItemContactEmail = new Property(57, String.class, "itemContactEmail", false, "ITEM_CONTACT_EMAIL");
        public final static Property ItemContactMobile = new Property(58, String.class, "itemContactMobile", false, "ITEM_CONTACT_MOBILE");
        public final static Property ItemContactHomephone = new Property(59, String.class, "itemContactHomephone", false, "ITEM_CONTACT_HOMEPHONE");
        public final static Property AgencyName = new Property(60, String.class, "agencyName", false, "AGENCY_NAME");
        public final static Property ProductOwnerUrlKey = new Property(61, String.class, "productOwnerUrlKey", false, "PRODUCT_OWNER_URL_KEY");
        public final static Property ProductOwner = new Property(62, String.class, "productOwner", false, "PRODUCT_OWNER");
        public final static Property FkCustomer = new Property(63, String.class, "fkCustomer", false, "FK_CUSTOMER");
        public final static Property IsAgent = new Property(64, String.class, "isAgent", false, "IS_AGENT");
        public final static Property SellerIsTrusted = new Property(65, String.class, "sellerIsTrusted", false, "SELLER_IS_TRUSTED");
        public final static Property ShowOfficephone = new Property(66, String.class, "showOfficephone", false, "SHOW_OFFICEPHONE");
        public final static Property ShowHomephone = new Property(67, String.class, "showHomephone", false, "SHOW_HOMEPHONE");
        public final static Property ShowMobile = new Property(68, String.class, "showMobile", false, "SHOW_MOBILE");
        public final static Property Sku = new Property(69, String.class, "sku", false, "SKU");
        public final static Property IdCatalogConfig = new Property(70, String.class, "idCatalogConfig", false, "ID_CATALOG_CONFIG");
        public final static Property AttributeSetId = new Property(71, String.class, "attributeSetId", false, "ATTRIBUTE_SET_ID");
        public final static Property OriginalPriceCurrency = new Property(72, String.class, "originalPriceCurrency", false, "ORIGINAL_PRICE_CURRENCY");
        public final static Property IsCertified = new Property(73, int.class, "isCertified", false, "IS_CERTIFIED");
        public final static Property Name = new Property(74, String.class, "name", false, "NAME");
        public final static Property Description = new Property(75, String.class, "description", false, "DESCRIPTION");
        public final static Property UrlkeyDetails = new Property(76, String.class, "urlkeyDetails", false, "URLKEY_DETAILS");
        public final static Property PriceNotAvailable = new Property(77, String.class, "priceNotAvailable", false, "PRICE_NOT_AVAILABLE");
        public final static Property Price = new Property(78, String.class, "price", false, "PRICE");
        public final static Property OriginalPrice = new Property(79, String.class, "originalPrice", false, "ORIGINAL_PRICE");
        public final static Property Brand = new Property(80, String.class, "brand", false, "BRAND");
        public final static Property BrandModel = new Property(81, String.class, "brandModel", false, "BRAND_MODEL");
        public final static Property TopPosition = new Property(82, String.class, "topPosition", false, "TOP_POSITION");
        public final static Property MileageNotAvailable = new Property(83, String.class, "mileageNotAvailable", false, "MILEAGE_NOT_AVAILABLE");
        public final static Property Mileage = new Property(84, String.class, "mileage", false, "MILEAGE");
        public final static Property ConfigId = new Property(85, String.class, "configId", false, "CONFIG_ID");
        public final static Property RejectedComment = new Property(86, String.class, "rejectedComment", false, "REJECTED_COMMENT");
        public final static Property Transmission = new Property(87, String.class, "transmission", false, "TRANSMISSION");
        public final static Property TransmissionPosition = new Property(88, String.class, "transmissionPosition", false, "TRANSMISSION_POSITION");
        public final static Property TransmissionId = new Property(89, String.class, "transmissionId", false, "TRANSMISSION_ID");
        public final static Property Fuel = new Property(90, String.class, "fuel", false, "FUEL");
        public final static Property FuelPosition = new Property(91, String.class, "fuelPosition", false, "FUEL_POSITION");
        public final static Property FuelId = new Property(92, String.class, "fuelId", false, "FUEL_ID");
    }


    public CarsDataDao(DaoConfig config) {
        super(config);
    }
    
    public CarsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARS_DATA\" (" + //
                "\"FK_COUNTRY\" TEXT," + // 0: fkCountry
                "\"STATUS\" TEXT," + // 1: status
                "\"ATTRIBUTE_SET_NAME\" TEXT," + // 2: attributeSetName
                "\"ATTRIBUTE_SET_NAME_LOCAL\" TEXT," + // 3: attributeSetNameLocal
                "\"APPROVED\" TEXT," + // 4: approved
                "\"STATUS_SUPPLIER_CONFIG\" TEXT," + // 5: statusSupplierConfig
                "\"ACTIVATED_AT\" TEXT," + // 6: activatedAt
                "\"LISTING_START\" TEXT," + // 7: listingStart
                "\"LISTING_END\" TEXT," + // 8: listingEnd
                "\"FK_VERTICAL\" TEXT," + // 9: fkVertical
                "\"FK_CATALOG_BRAND\" TEXT," + // 10: fkCatalogBrand
                "\"FK_CATALOG_BRAND_MODEL\" TEXT," + // 11: fkCatalogBrandModel
                "\"BRAND_MODEL_EDITION\" TEXT," + // 12: brandModelEdition
                "\"LISTING_TYPE\" TEXT," + // 13: listingType
                "\"LISTING_COUNTRY\" TEXT," + // 14: listingCountry
                "\"LISTING_AREA\" TEXT," + // 15: listingArea
                "\"CONDITION\" TEXT," + // 16: condition
                "\"CONDITION_POSITION\" TEXT," + // 17: conditionPosition
                "\"CONDITION_ID\" TEXT," + // 18: conditionId
                "\"COLOR_FAMILY_POSITION\" TEXT," + // 19: colorFamilyPosition
                "\"COLOR_FAMILY_ID\" TEXT," + // 20: colorFamilyId
                "\"DOORS_POSITION\" TEXT," + // 21: doorsPosition
                "\"DOORS_ID\" TEXT," + // 22: doorsId
                "\"POWER\" TEXT," + // 23: power
                "\"DRIVE_TYPE_POSITION\" TEXT," + // 24: driveTypePosition
                "\"DRIVE_TYPE_ID\" TEXT," + // 25: driveTypeId
                "\"INTERIOR\" TEXT," + // 26: interior
                "\"EXTERIOR\" TEXT," + // 27: exterior
                "\"EQUIPMENT\" TEXT," + // 28: equipment
                "\"WARRANTY_TYPE_POSITION\" TEXT," + // 29: warrantyTypePosition
                "\"WARRANTY_TYPE_ID\" TEXT," + // 30: warrantyTypeId
                "\"WARRANTY_YEARS_POSITION\" TEXT," + // 31: warrantyYearsPosition
                "\"WARRANTY_YEARS_ID\" TEXT," + // 32: warrantyYearsId
                "\"PRICE_CONDITIONS_POSITION\" TEXT," + // 33: priceConditionsPosition
                "\"PRICE_CONDITIONS_ID\" TEXT," + // 34: priceConditionsId
                "\"PREMIUM_LISTING\" TEXT," + // 35: premiumListing
                "\"ALTERNATE_SKU\" TEXT," + // 36: alternateSku
                "\"ORIGINAL_NAME\" TEXT," + // 37: originalName
                "\"ROOT_CATEGORY\" TEXT," + // 38: rootCategory
                "\"AGENCY_LOGO\" TEXT," + // 39: agencyLogo
                "\"NEW_PRODUCT\" INTEGER," + // 40: newProduct
                "\"URL\" TEXT," + // 41: url
                "\"ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 42: id
                "\"LOCATION_LATITUDE\" TEXT," + // 43: locationLatitude
                "\"LOCATION_LONGITUDE\" TEXT," + // 44: locationLongitude
                "\"GOOGLE_FORMATTED_ADDRESS\" TEXT," + // 45: googleFormattedAddress
                "\"GOOGLE_PLACE_ID\" TEXT," + // 46: googlePlaceId
                "\"FK_CUSTOMER_ADDRESS\" TEXT," + // 47: fkCustomerAddress
                "\"LISTING_REGION\" TEXT," + // 48: listingRegion
                "\"LISTING_CITY\" TEXT," + // 49: listingCity
                "\"AGENCY_ADDRESS\" TEXT," + // 50: agencyAddress
                "\"AGENCY_CITY\" TEXT," + // 51: agencyCity
                "\"FK_COUNTRY_REGION\" TEXT," + // 52: fkCountryRegion
                "\"FK_COUNTRY_REGION_CITY\" TEXT," + // 53: fkCountryRegionCity
                "\"FK_COUNTRY_REGION_CITY_AREA\" TEXT," + // 54: fkCountryRegionCityArea
                "\"SHOW_LISTING_ADDRESS\" TEXT," + // 55: showListingAddress
                "\"ITEM_CONTACT_NAME\" TEXT," + // 56: itemContactName
                "\"ITEM_CONTACT_EMAIL\" TEXT," + // 57: itemContactEmail
                "\"ITEM_CONTACT_MOBILE\" TEXT," + // 58: itemContactMobile
                "\"ITEM_CONTACT_HOMEPHONE\" TEXT," + // 59: itemContactHomephone
                "\"AGENCY_NAME\" TEXT," + // 60: agencyName
                "\"PRODUCT_OWNER_URL_KEY\" TEXT," + // 61: productOwnerUrlKey
                "\"PRODUCT_OWNER\" TEXT," + // 62: productOwner
                "\"FK_CUSTOMER\" TEXT," + // 63: fkCustomer
                "\"IS_AGENT\" TEXT," + // 64: isAgent
                "\"SELLER_IS_TRUSTED\" TEXT," + // 65: sellerIsTrusted
                "\"SHOW_OFFICEPHONE\" TEXT," + // 66: showOfficephone
                "\"SHOW_HOMEPHONE\" TEXT," + // 67: showHomephone
                "\"SHOW_MOBILE\" TEXT," + // 68: showMobile
                "\"SKU\" TEXT," + // 69: sku
                "\"ID_CATALOG_CONFIG\" TEXT," + // 70: idCatalogConfig
                "\"ATTRIBUTE_SET_ID\" TEXT," + // 71: attributeSetId
                "\"ORIGINAL_PRICE_CURRENCY\" TEXT," + // 72: originalPriceCurrency
                "\"IS_CERTIFIED\" INTEGER NOT NULL ," + // 73: isCertified
                "\"NAME\" TEXT," + // 74: name
                "\"DESCRIPTION\" TEXT," + // 75: description
                "\"URLKEY_DETAILS\" TEXT," + // 76: urlkeyDetails
                "\"PRICE_NOT_AVAILABLE\" TEXT," + // 77: priceNotAvailable
                "\"PRICE\" TEXT," + // 78: price
                "\"ORIGINAL_PRICE\" TEXT," + // 79: originalPrice
                "\"BRAND\" TEXT," + // 80: brand
                "\"BRAND_MODEL\" TEXT," + // 81: brandModel
                "\"TOP_POSITION\" TEXT," + // 82: topPosition
                "\"MILEAGE_NOT_AVAILABLE\" TEXT," + // 83: mileageNotAvailable
                "\"MILEAGE\" TEXT," + // 84: mileage
                "\"CONFIG_ID\" TEXT," + // 85: configId
                "\"REJECTED_COMMENT\" TEXT," + // 86: rejectedComment
                "\"TRANSMISSION\" TEXT," + // 87: transmission
                "\"TRANSMISSION_POSITION\" TEXT," + // 88: transmissionPosition
                "\"TRANSMISSION_ID\" TEXT," + // 89: transmissionId
                "\"FUEL\" TEXT," + // 90: fuel
                "\"FUEL_POSITION\" TEXT," + // 91: fuelPosition
                "\"FUEL_ID\" TEXT);"); // 92: fuelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarsData entity) {
        stmt.clearBindings();
 
        String fkCountry = entity.getFkCountry();
        if (fkCountry != null) {
            stmt.bindString(1, fkCountry);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String attributeSetName = entity.getAttributeSetName();
        if (attributeSetName != null) {
            stmt.bindString(3, attributeSetName);
        }
 
        String attributeSetNameLocal = entity.getAttributeSetNameLocal();
        if (attributeSetNameLocal != null) {
            stmt.bindString(4, attributeSetNameLocal);
        }
 
        String approved = entity.getApproved();
        if (approved != null) {
            stmt.bindString(5, approved);
        }
 
        String statusSupplierConfig = entity.getStatusSupplierConfig();
        if (statusSupplierConfig != null) {
            stmt.bindString(6, statusSupplierConfig);
        }
 
        String activatedAt = entity.getActivatedAt();
        if (activatedAt != null) {
            stmt.bindString(7, activatedAt);
        }
 
        String listingStart = entity.getListingStart();
        if (listingStart != null) {
            stmt.bindString(8, listingStart);
        }
 
        String listingEnd = entity.getListingEnd();
        if (listingEnd != null) {
            stmt.bindString(9, listingEnd);
        }
 
        String fkVertical = entity.getFkVertical();
        if (fkVertical != null) {
            stmt.bindString(10, fkVertical);
        }
 
        String fkCatalogBrand = entity.getFkCatalogBrand();
        if (fkCatalogBrand != null) {
            stmt.bindString(11, fkCatalogBrand);
        }
 
        String fkCatalogBrandModel = entity.getFkCatalogBrandModel();
        if (fkCatalogBrandModel != null) {
            stmt.bindString(12, fkCatalogBrandModel);
        }
 
        String brandModelEdition = entity.getBrandModelEdition();
        if (brandModelEdition != null) {
            stmt.bindString(13, brandModelEdition);
        }
 
        String listingType = entity.getListingType();
        if (listingType != null) {
            stmt.bindString(14, listingType);
        }
 
        String listingCountry = entity.getListingCountry();
        if (listingCountry != null) {
            stmt.bindString(15, listingCountry);
        }
 
        String listingArea = entity.getListingArea();
        if (listingArea != null) {
            stmt.bindString(16, listingArea);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(17, condition);
        }
 
        String conditionPosition = entity.getConditionPosition();
        if (conditionPosition != null) {
            stmt.bindString(18, conditionPosition);
        }
 
        String conditionId = entity.getConditionId();
        if (conditionId != null) {
            stmt.bindString(19, conditionId);
        }
 
        String colorFamilyPosition = entity.getColorFamilyPosition();
        if (colorFamilyPosition != null) {
            stmt.bindString(20, colorFamilyPosition);
        }
 
        String colorFamilyId = entity.getColorFamilyId();
        if (colorFamilyId != null) {
            stmt.bindString(21, colorFamilyId);
        }
 
        String doorsPosition = entity.getDoorsPosition();
        if (doorsPosition != null) {
            stmt.bindString(22, doorsPosition);
        }
 
        String doorsId = entity.getDoorsId();
        if (doorsId != null) {
            stmt.bindString(23, doorsId);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(24, power);
        }
 
        String driveTypePosition = entity.getDriveTypePosition();
        if (driveTypePosition != null) {
            stmt.bindString(25, driveTypePosition);
        }
 
        String driveTypeId = entity.getDriveTypeId();
        if (driveTypeId != null) {
            stmt.bindString(26, driveTypeId);
        }
 
        String interior = entity.getInterior();
        if (interior != null) {
            stmt.bindString(27, interior);
        }
 
        String exterior = entity.getExterior();
        if (exterior != null) {
            stmt.bindString(28, exterior);
        }
 
        String equipment = entity.getEquipment();
        if (equipment != null) {
            stmt.bindString(29, equipment);
        }
 
        String warrantyTypePosition = entity.getWarrantyTypePosition();
        if (warrantyTypePosition != null) {
            stmt.bindString(30, warrantyTypePosition);
        }
 
        String warrantyTypeId = entity.getWarrantyTypeId();
        if (warrantyTypeId != null) {
            stmt.bindString(31, warrantyTypeId);
        }
 
        String warrantyYearsPosition = entity.getWarrantyYearsPosition();
        if (warrantyYearsPosition != null) {
            stmt.bindString(32, warrantyYearsPosition);
        }
 
        String warrantyYearsId = entity.getWarrantyYearsId();
        if (warrantyYearsId != null) {
            stmt.bindString(33, warrantyYearsId);
        }
 
        String priceConditionsPosition = entity.getPriceConditionsPosition();
        if (priceConditionsPosition != null) {
            stmt.bindString(34, priceConditionsPosition);
        }
 
        String priceConditionsId = entity.getPriceConditionsId();
        if (priceConditionsId != null) {
            stmt.bindString(35, priceConditionsId);
        }
 
        String premiumListing = entity.getPremiumListing();
        if (premiumListing != null) {
            stmt.bindString(36, premiumListing);
        }
 
        String alternateSku = entity.getAlternateSku();
        if (alternateSku != null) {
            stmt.bindString(37, alternateSku);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(38, originalName);
        }
 
        String rootCategory = entity.getRootCategory();
        if (rootCategory != null) {
            stmt.bindString(39, rootCategory);
        }
 
        String agencyLogo = entity.getAgencyLogo();
        if (agencyLogo != null) {
            stmt.bindString(40, agencyLogo);
        }
 
        Boolean newProduct = entity.getNewProduct();
        if (newProduct != null) {
            stmt.bindLong(41, newProduct ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(42, url);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(43, id);
        }
 
        String locationLatitude = entity.getLocationLatitude();
        if (locationLatitude != null) {
            stmt.bindString(44, locationLatitude);
        }
 
        String locationLongitude = entity.getLocationLongitude();
        if (locationLongitude != null) {
            stmt.bindString(45, locationLongitude);
        }
 
        String googleFormattedAddress = entity.getGoogleFormattedAddress();
        if (googleFormattedAddress != null) {
            stmt.bindString(46, googleFormattedAddress);
        }
 
        String googlePlaceId = entity.getGooglePlaceId();
        if (googlePlaceId != null) {
            stmt.bindString(47, googlePlaceId);
        }
 
        String fkCustomerAddress = entity.getFkCustomerAddress();
        if (fkCustomerAddress != null) {
            stmt.bindString(48, fkCustomerAddress);
        }
 
        String listingRegion = entity.getListingRegion();
        if (listingRegion != null) {
            stmt.bindString(49, listingRegion);
        }
 
        String listingCity = entity.getListingCity();
        if (listingCity != null) {
            stmt.bindString(50, listingCity);
        }
 
        String agencyAddress = entity.getAgencyAddress();
        if (agencyAddress != null) {
            stmt.bindString(51, agencyAddress);
        }
 
        String agencyCity = entity.getAgencyCity();
        if (agencyCity != null) {
            stmt.bindString(52, agencyCity);
        }
 
        String fkCountryRegion = entity.getFkCountryRegion();
        if (fkCountryRegion != null) {
            stmt.bindString(53, fkCountryRegion);
        }
 
        String fkCountryRegionCity = entity.getFkCountryRegionCity();
        if (fkCountryRegionCity != null) {
            stmt.bindString(54, fkCountryRegionCity);
        }
 
        String fkCountryRegionCityArea = entity.getFkCountryRegionCityArea();
        if (fkCountryRegionCityArea != null) {
            stmt.bindString(55, fkCountryRegionCityArea);
        }
 
        String showListingAddress = entity.getShowListingAddress();
        if (showListingAddress != null) {
            stmt.bindString(56, showListingAddress);
        }
 
        String itemContactName = entity.getItemContactName();
        if (itemContactName != null) {
            stmt.bindString(57, itemContactName);
        }
 
        String itemContactEmail = entity.getItemContactEmail();
        if (itemContactEmail != null) {
            stmt.bindString(58, itemContactEmail);
        }
 
        String itemContactMobile = entity.getItemContactMobile();
        if (itemContactMobile != null) {
            stmt.bindString(59, itemContactMobile);
        }
 
        String itemContactHomephone = entity.getItemContactHomephone();
        if (itemContactHomephone != null) {
            stmt.bindString(60, itemContactHomephone);
        }
 
        String agencyName = entity.getAgencyName();
        if (agencyName != null) {
            stmt.bindString(61, agencyName);
        }
 
        String productOwnerUrlKey = entity.getProductOwnerUrlKey();
        if (productOwnerUrlKey != null) {
            stmt.bindString(62, productOwnerUrlKey);
        }
 
        String productOwner = entity.getProductOwner();
        if (productOwner != null) {
            stmt.bindString(63, productOwner);
        }
 
        String fkCustomer = entity.getFkCustomer();
        if (fkCustomer != null) {
            stmt.bindString(64, fkCustomer);
        }
 
        String isAgent = entity.getIsAgent();
        if (isAgent != null) {
            stmt.bindString(65, isAgent);
        }
 
        String sellerIsTrusted = entity.getSellerIsTrusted();
        if (sellerIsTrusted != null) {
            stmt.bindString(66, sellerIsTrusted);
        }
 
        String showOfficephone = entity.getShowOfficephone();
        if (showOfficephone != null) {
            stmt.bindString(67, showOfficephone);
        }
 
        String showHomephone = entity.getShowHomephone();
        if (showHomephone != null) {
            stmt.bindString(68, showHomephone);
        }
 
        String showMobile = entity.getShowMobile();
        if (showMobile != null) {
            stmt.bindString(69, showMobile);
        }
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(70, sku);
        }
 
        String idCatalogConfig = entity.getIdCatalogConfig();
        if (idCatalogConfig != null) {
            stmt.bindString(71, idCatalogConfig);
        }
 
        String attributeSetId = entity.getAttributeSetId();
        if (attributeSetId != null) {
            stmt.bindString(72, attributeSetId);
        }
 
        String originalPriceCurrency = entity.getOriginalPriceCurrency();
        if (originalPriceCurrency != null) {
            stmt.bindString(73, originalPriceCurrency);
        }
        stmt.bindLong(74, entity.getIsCertified());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(75, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(76, description);
        }
 
        String urlkeyDetails = entity.getUrlkeyDetails();
        if (urlkeyDetails != null) {
            stmt.bindString(77, urlkeyDetails);
        }
 
        String priceNotAvailable = entity.getPriceNotAvailable();
        if (priceNotAvailable != null) {
            stmt.bindString(78, priceNotAvailable);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(79, price);
        }
 
        String originalPrice = entity.getOriginalPrice();
        if (originalPrice != null) {
            stmt.bindString(80, originalPrice);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(81, brand);
        }
 
        String brandModel = entity.getBrandModel();
        if (brandModel != null) {
            stmt.bindString(82, brandModel);
        }
 
        String topPosition = entity.getTopPosition();
        if (topPosition != null) {
            stmt.bindString(83, topPosition);
        }
 
        String mileageNotAvailable = entity.getMileageNotAvailable();
        if (mileageNotAvailable != null) {
            stmt.bindString(84, mileageNotAvailable);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(85, mileage);
        }
 
        String configId = entity.getConfigId();
        if (configId != null) {
            stmt.bindString(86, configId);
        }
 
        String rejectedComment = entity.getRejectedComment();
        if (rejectedComment != null) {
            stmt.bindString(87, rejectedComment);
        }
 
        String transmission = entity.getTransmission();
        if (transmission != null) {
            stmt.bindString(88, transmission);
        }
 
        String transmissionPosition = entity.getTransmissionPosition();
        if (transmissionPosition != null) {
            stmt.bindString(89, transmissionPosition);
        }
 
        String transmissionId = entity.getTransmissionId();
        if (transmissionId != null) {
            stmt.bindString(90, transmissionId);
        }
 
        String fuel = entity.getFuel();
        if (fuel != null) {
            stmt.bindString(91, fuel);
        }
 
        String fuelPosition = entity.getFuelPosition();
        if (fuelPosition != null) {
            stmt.bindString(92, fuelPosition);
        }
 
        String fuelId = entity.getFuelId();
        if (fuelId != null) {
            stmt.bindString(93, fuelId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarsData entity) {
        stmt.clearBindings();
 
        String fkCountry = entity.getFkCountry();
        if (fkCountry != null) {
            stmt.bindString(1, fkCountry);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String attributeSetName = entity.getAttributeSetName();
        if (attributeSetName != null) {
            stmt.bindString(3, attributeSetName);
        }
 
        String attributeSetNameLocal = entity.getAttributeSetNameLocal();
        if (attributeSetNameLocal != null) {
            stmt.bindString(4, attributeSetNameLocal);
        }
 
        String approved = entity.getApproved();
        if (approved != null) {
            stmt.bindString(5, approved);
        }
 
        String statusSupplierConfig = entity.getStatusSupplierConfig();
        if (statusSupplierConfig != null) {
            stmt.bindString(6, statusSupplierConfig);
        }
 
        String activatedAt = entity.getActivatedAt();
        if (activatedAt != null) {
            stmt.bindString(7, activatedAt);
        }
 
        String listingStart = entity.getListingStart();
        if (listingStart != null) {
            stmt.bindString(8, listingStart);
        }
 
        String listingEnd = entity.getListingEnd();
        if (listingEnd != null) {
            stmt.bindString(9, listingEnd);
        }
 
        String fkVertical = entity.getFkVertical();
        if (fkVertical != null) {
            stmt.bindString(10, fkVertical);
        }
 
        String fkCatalogBrand = entity.getFkCatalogBrand();
        if (fkCatalogBrand != null) {
            stmt.bindString(11, fkCatalogBrand);
        }
 
        String fkCatalogBrandModel = entity.getFkCatalogBrandModel();
        if (fkCatalogBrandModel != null) {
            stmt.bindString(12, fkCatalogBrandModel);
        }
 
        String brandModelEdition = entity.getBrandModelEdition();
        if (brandModelEdition != null) {
            stmt.bindString(13, brandModelEdition);
        }
 
        String listingType = entity.getListingType();
        if (listingType != null) {
            stmt.bindString(14, listingType);
        }
 
        String listingCountry = entity.getListingCountry();
        if (listingCountry != null) {
            stmt.bindString(15, listingCountry);
        }
 
        String listingArea = entity.getListingArea();
        if (listingArea != null) {
            stmt.bindString(16, listingArea);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(17, condition);
        }
 
        String conditionPosition = entity.getConditionPosition();
        if (conditionPosition != null) {
            stmt.bindString(18, conditionPosition);
        }
 
        String conditionId = entity.getConditionId();
        if (conditionId != null) {
            stmt.bindString(19, conditionId);
        }
 
        String colorFamilyPosition = entity.getColorFamilyPosition();
        if (colorFamilyPosition != null) {
            stmt.bindString(20, colorFamilyPosition);
        }
 
        String colorFamilyId = entity.getColorFamilyId();
        if (colorFamilyId != null) {
            stmt.bindString(21, colorFamilyId);
        }
 
        String doorsPosition = entity.getDoorsPosition();
        if (doorsPosition != null) {
            stmt.bindString(22, doorsPosition);
        }
 
        String doorsId = entity.getDoorsId();
        if (doorsId != null) {
            stmt.bindString(23, doorsId);
        }
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(24, power);
        }
 
        String driveTypePosition = entity.getDriveTypePosition();
        if (driveTypePosition != null) {
            stmt.bindString(25, driveTypePosition);
        }
 
        String driveTypeId = entity.getDriveTypeId();
        if (driveTypeId != null) {
            stmt.bindString(26, driveTypeId);
        }
 
        String interior = entity.getInterior();
        if (interior != null) {
            stmt.bindString(27, interior);
        }
 
        String exterior = entity.getExterior();
        if (exterior != null) {
            stmt.bindString(28, exterior);
        }
 
        String equipment = entity.getEquipment();
        if (equipment != null) {
            stmt.bindString(29, equipment);
        }
 
        String warrantyTypePosition = entity.getWarrantyTypePosition();
        if (warrantyTypePosition != null) {
            stmt.bindString(30, warrantyTypePosition);
        }
 
        String warrantyTypeId = entity.getWarrantyTypeId();
        if (warrantyTypeId != null) {
            stmt.bindString(31, warrantyTypeId);
        }
 
        String warrantyYearsPosition = entity.getWarrantyYearsPosition();
        if (warrantyYearsPosition != null) {
            stmt.bindString(32, warrantyYearsPosition);
        }
 
        String warrantyYearsId = entity.getWarrantyYearsId();
        if (warrantyYearsId != null) {
            stmt.bindString(33, warrantyYearsId);
        }
 
        String priceConditionsPosition = entity.getPriceConditionsPosition();
        if (priceConditionsPosition != null) {
            stmt.bindString(34, priceConditionsPosition);
        }
 
        String priceConditionsId = entity.getPriceConditionsId();
        if (priceConditionsId != null) {
            stmt.bindString(35, priceConditionsId);
        }
 
        String premiumListing = entity.getPremiumListing();
        if (premiumListing != null) {
            stmt.bindString(36, premiumListing);
        }
 
        String alternateSku = entity.getAlternateSku();
        if (alternateSku != null) {
            stmt.bindString(37, alternateSku);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(38, originalName);
        }
 
        String rootCategory = entity.getRootCategory();
        if (rootCategory != null) {
            stmt.bindString(39, rootCategory);
        }
 
        String agencyLogo = entity.getAgencyLogo();
        if (agencyLogo != null) {
            stmt.bindString(40, agencyLogo);
        }
 
        Boolean newProduct = entity.getNewProduct();
        if (newProduct != null) {
            stmt.bindLong(41, newProduct ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(42, url);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(43, id);
        }
 
        String locationLatitude = entity.getLocationLatitude();
        if (locationLatitude != null) {
            stmt.bindString(44, locationLatitude);
        }
 
        String locationLongitude = entity.getLocationLongitude();
        if (locationLongitude != null) {
            stmt.bindString(45, locationLongitude);
        }
 
        String googleFormattedAddress = entity.getGoogleFormattedAddress();
        if (googleFormattedAddress != null) {
            stmt.bindString(46, googleFormattedAddress);
        }
 
        String googlePlaceId = entity.getGooglePlaceId();
        if (googlePlaceId != null) {
            stmt.bindString(47, googlePlaceId);
        }
 
        String fkCustomerAddress = entity.getFkCustomerAddress();
        if (fkCustomerAddress != null) {
            stmt.bindString(48, fkCustomerAddress);
        }
 
        String listingRegion = entity.getListingRegion();
        if (listingRegion != null) {
            stmt.bindString(49, listingRegion);
        }
 
        String listingCity = entity.getListingCity();
        if (listingCity != null) {
            stmt.bindString(50, listingCity);
        }
 
        String agencyAddress = entity.getAgencyAddress();
        if (agencyAddress != null) {
            stmt.bindString(51, agencyAddress);
        }
 
        String agencyCity = entity.getAgencyCity();
        if (agencyCity != null) {
            stmt.bindString(52, agencyCity);
        }
 
        String fkCountryRegion = entity.getFkCountryRegion();
        if (fkCountryRegion != null) {
            stmt.bindString(53, fkCountryRegion);
        }
 
        String fkCountryRegionCity = entity.getFkCountryRegionCity();
        if (fkCountryRegionCity != null) {
            stmt.bindString(54, fkCountryRegionCity);
        }
 
        String fkCountryRegionCityArea = entity.getFkCountryRegionCityArea();
        if (fkCountryRegionCityArea != null) {
            stmt.bindString(55, fkCountryRegionCityArea);
        }
 
        String showListingAddress = entity.getShowListingAddress();
        if (showListingAddress != null) {
            stmt.bindString(56, showListingAddress);
        }
 
        String itemContactName = entity.getItemContactName();
        if (itemContactName != null) {
            stmt.bindString(57, itemContactName);
        }
 
        String itemContactEmail = entity.getItemContactEmail();
        if (itemContactEmail != null) {
            stmt.bindString(58, itemContactEmail);
        }
 
        String itemContactMobile = entity.getItemContactMobile();
        if (itemContactMobile != null) {
            stmt.bindString(59, itemContactMobile);
        }
 
        String itemContactHomephone = entity.getItemContactHomephone();
        if (itemContactHomephone != null) {
            stmt.bindString(60, itemContactHomephone);
        }
 
        String agencyName = entity.getAgencyName();
        if (agencyName != null) {
            stmt.bindString(61, agencyName);
        }
 
        String productOwnerUrlKey = entity.getProductOwnerUrlKey();
        if (productOwnerUrlKey != null) {
            stmt.bindString(62, productOwnerUrlKey);
        }
 
        String productOwner = entity.getProductOwner();
        if (productOwner != null) {
            stmt.bindString(63, productOwner);
        }
 
        String fkCustomer = entity.getFkCustomer();
        if (fkCustomer != null) {
            stmt.bindString(64, fkCustomer);
        }
 
        String isAgent = entity.getIsAgent();
        if (isAgent != null) {
            stmt.bindString(65, isAgent);
        }
 
        String sellerIsTrusted = entity.getSellerIsTrusted();
        if (sellerIsTrusted != null) {
            stmt.bindString(66, sellerIsTrusted);
        }
 
        String showOfficephone = entity.getShowOfficephone();
        if (showOfficephone != null) {
            stmt.bindString(67, showOfficephone);
        }
 
        String showHomephone = entity.getShowHomephone();
        if (showHomephone != null) {
            stmt.bindString(68, showHomephone);
        }
 
        String showMobile = entity.getShowMobile();
        if (showMobile != null) {
            stmt.bindString(69, showMobile);
        }
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(70, sku);
        }
 
        String idCatalogConfig = entity.getIdCatalogConfig();
        if (idCatalogConfig != null) {
            stmt.bindString(71, idCatalogConfig);
        }
 
        String attributeSetId = entity.getAttributeSetId();
        if (attributeSetId != null) {
            stmt.bindString(72, attributeSetId);
        }
 
        String originalPriceCurrency = entity.getOriginalPriceCurrency();
        if (originalPriceCurrency != null) {
            stmt.bindString(73, originalPriceCurrency);
        }
        stmt.bindLong(74, entity.getIsCertified());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(75, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(76, description);
        }
 
        String urlkeyDetails = entity.getUrlkeyDetails();
        if (urlkeyDetails != null) {
            stmt.bindString(77, urlkeyDetails);
        }
 
        String priceNotAvailable = entity.getPriceNotAvailable();
        if (priceNotAvailable != null) {
            stmt.bindString(78, priceNotAvailable);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(79, price);
        }
 
        String originalPrice = entity.getOriginalPrice();
        if (originalPrice != null) {
            stmt.bindString(80, originalPrice);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(81, brand);
        }
 
        String brandModel = entity.getBrandModel();
        if (brandModel != null) {
            stmt.bindString(82, brandModel);
        }
 
        String topPosition = entity.getTopPosition();
        if (topPosition != null) {
            stmt.bindString(83, topPosition);
        }
 
        String mileageNotAvailable = entity.getMileageNotAvailable();
        if (mileageNotAvailable != null) {
            stmt.bindString(84, mileageNotAvailable);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(85, mileage);
        }
 
        String configId = entity.getConfigId();
        if (configId != null) {
            stmt.bindString(86, configId);
        }
 
        String rejectedComment = entity.getRejectedComment();
        if (rejectedComment != null) {
            stmt.bindString(87, rejectedComment);
        }
 
        String transmission = entity.getTransmission();
        if (transmission != null) {
            stmt.bindString(88, transmission);
        }
 
        String transmissionPosition = entity.getTransmissionPosition();
        if (transmissionPosition != null) {
            stmt.bindString(89, transmissionPosition);
        }
 
        String transmissionId = entity.getTransmissionId();
        if (transmissionId != null) {
            stmt.bindString(90, transmissionId);
        }
 
        String fuel = entity.getFuel();
        if (fuel != null) {
            stmt.bindString(91, fuel);
        }
 
        String fuelPosition = entity.getFuelPosition();
        if (fuelPosition != null) {
            stmt.bindString(92, fuelPosition);
        }
 
        String fuelId = entity.getFuelId();
        if (fuelId != null) {
            stmt.bindString(93, fuelId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42);
    }    

    @Override
    public CarsData readEntity(Cursor cursor, int offset) {
        CarsData entity = new CarsData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fkCountry
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attributeSetName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // attributeSetNameLocal
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // approved
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // statusSupplierConfig
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // activatedAt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // listingStart
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // listingEnd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fkVertical
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fkCatalogBrand
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fkCatalogBrandModel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // brandModelEdition
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // listingType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // listingCountry
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // listingArea
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // condition
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // conditionPosition
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // conditionId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // colorFamilyPosition
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // colorFamilyId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // doorsPosition
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // doorsId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // power
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // driveTypePosition
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // driveTypeId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // interior
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // exterior
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // equipment
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // warrantyTypePosition
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // warrantyTypeId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // warrantyYearsPosition
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // warrantyYearsId
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // priceConditionsPosition
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // priceConditionsId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // premiumListing
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // alternateSku
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // originalName
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // rootCategory
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // agencyLogo
            cursor.isNull(offset + 40) ? null : cursor.getShort(offset + 40) != 0, // newProduct
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // url
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // id
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // locationLatitude
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // locationLongitude
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // googleFormattedAddress
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // googlePlaceId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // fkCustomerAddress
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // listingRegion
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // listingCity
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // agencyAddress
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // agencyCity
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // fkCountryRegion
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // fkCountryRegionCity
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // fkCountryRegionCityArea
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // showListingAddress
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // itemContactName
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // itemContactEmail
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // itemContactMobile
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // itemContactHomephone
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // agencyName
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // productOwnerUrlKey
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // productOwner
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // fkCustomer
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // isAgent
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // sellerIsTrusted
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // showOfficephone
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // showHomephone
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // showMobile
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // sku
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // idCatalogConfig
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // attributeSetId
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // originalPriceCurrency
            cursor.getInt(offset + 73), // isCertified
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // name
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // description
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // urlkeyDetails
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // priceNotAvailable
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // price
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // originalPrice
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // brand
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // brandModel
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // topPosition
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // mileageNotAvailable
            cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84), // mileage
            cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85), // configId
            cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86), // rejectedComment
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // transmission
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // transmissionPosition
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // transmissionId
            cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90), // fuel
            cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91), // fuelPosition
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92) // fuelId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarsData entity, int offset) {
        entity.setFkCountry(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttributeSetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAttributeSetNameLocal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApproved(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatusSupplierConfig(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setActivatedAt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setListingStart(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setListingEnd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFkVertical(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFkCatalogBrand(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFkCatalogBrandModel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBrandModelEdition(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setListingType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setListingCountry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setListingArea(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCondition(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setConditionPosition(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setConditionId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setColorFamilyPosition(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setColorFamilyId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDoorsPosition(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDoorsId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPower(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDriveTypePosition(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDriveTypeId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setInterior(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setExterior(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setEquipment(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setWarrantyTypePosition(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setWarrantyTypeId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setWarrantyYearsPosition(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setWarrantyYearsId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setPriceConditionsPosition(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPriceConditionsId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setPremiumListing(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setAlternateSku(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setOriginalName(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setRootCategory(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setAgencyLogo(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setNewProduct(cursor.isNull(offset + 40) ? null : cursor.getShort(offset + 40) != 0);
        entity.setUrl(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setId(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setLocationLatitude(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setLocationLongitude(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setGoogleFormattedAddress(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setGooglePlaceId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setFkCustomerAddress(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setListingRegion(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setListingCity(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setAgencyAddress(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setAgencyCity(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setFkCountryRegion(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setFkCountryRegionCity(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setFkCountryRegionCityArea(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setShowListingAddress(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setItemContactName(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setItemContactEmail(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setItemContactMobile(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setItemContactHomephone(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setAgencyName(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setProductOwnerUrlKey(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setProductOwner(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setFkCustomer(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setIsAgent(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setSellerIsTrusted(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setShowOfficephone(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setShowHomephone(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setShowMobile(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setSku(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setIdCatalogConfig(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setAttributeSetId(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setOriginalPriceCurrency(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setIsCertified(cursor.getInt(offset + 73));
        entity.setName(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setDescription(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setUrlkeyDetails(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setPriceNotAvailable(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setPrice(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setOriginalPrice(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setBrand(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setBrandModel(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setTopPosition(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setMileageNotAvailable(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setMileage(cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84));
        entity.setConfigId(cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85));
        entity.setRejectedComment(cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86));
        entity.setTransmission(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setTransmissionPosition(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setTransmissionId(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setFuel(cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90));
        entity.setFuelPosition(cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91));
        entity.setFuelId(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CarsData entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CarsData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CarsData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
